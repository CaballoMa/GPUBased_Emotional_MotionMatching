#include "/Engine/Public/Platform.ush"

Buffer<float> neededData;
Buffer<float> A;
Buffer<float> B;
Buffer<float> WeightsSqrt;
Buffer<float> DatabaseIdx;
Buffer<float> PoseIdx;
RWBuffer<float> PartialCosts;

[numthreads(1, 32, 32)]
void ExampleComputeShader(uint3 DTid : SV_DispatchThreadID,
    uint GroupIndex : SV_GroupIndex)
{
    int index = DTid.x;


    int currNum = DTid.y + 120 * DTid.z;


    if (currNum < neededData[1] + 1 )
    {
        int longIndex = currNum * 28;
        float4 overallCost;
        float4 VA, VB, VW, Diff, WeightedDiff;
        float PartialCost;
        float4 ones = float4(1.0, 1.0, 1.0, 1.0);
        
        for (int q = 0; q < 7; q++)
        {
            VA = float4(A[longIndex + q * 4], A[longIndex + q * 4 + 1], A[longIndex + q * 4 + 2], A[longIndex + q * 4 + 3]);
            VB = float4(B[index + q * 4], B[index + q * 4 + 1], B[index + q * 4 + 2], B[index + q * 4 + 3]);
            VW = float4(WeightsSqrt[index + q * 4], WeightsSqrt[index + q * 4 + 1], WeightsSqrt[index + q * 4 + 2], WeightsSqrt[index + q * 4 + 3]);

            Diff = VA - VB;
            WeightedDiff = Diff * VW;
            PartialCost = dot(WeightedDiff, WeightedDiff);

            overallCost += dot(PartialCost, ones);
        }
        PartialCosts[currNum * 3] = overallCost;
        
        PartialCosts[1 + currNum * 3] = DatabaseIdx[currNum];
        PartialCosts[2 + currNum * 3] = PoseIdx[currNum];
    }
    
}

